#standardSQL
create temporary function parseDays(s STRING)
    returns ARRAY<STRUCT<day STRING, active BOOLEAN>>
    language js as """
      try {
        return JSON.parse(s);
      } catch (e) {
        return [];
      }
    """;

create temporary function indexOf(displayId STRING, displayList ARRAY<STRING>)
    returns FLOAT64
    language js AS """
      return displayList.indexOf(displayId);
    """;

create temporary function productionApp()
  returns STRING
    as ('s~rvaserver2');
    -- as ('dummy');


create temporary function currentDate()
  returns DATE
    as (current_date());
    -- as (date(2018, 2, 2));

create temporary function currentTime()
  returns TIME
    as (current_time());
    -- as (time(21, 20, 22));

with

activeProductionCompanies as
(
select 
  C.companyId as companyId
from `rise-core-log.coreData.companies` C
inner join (select max(id) as id, companyId from `rise-core-log.coreData.companies` where appId = productionApp() group by companyId) C1 on C.id = C1.id
where appId = productionApp() and companyStatus = 1 and (isTest is null or isTest = false) 
group by 1
),

currentDisplays as
(
select 
  D.displayId as displayId, 
  D.companyId as companyId, 
  ifnull(monitoringSchedule, '') as monitoringSchedule, 
  monitoringEmails
from `rise-core-log.coreData.displays` D
inner join (select max(id) as id, displayId from `rise-core-log.coreData.displays` where appId = productionApp() group by displayId) D1 on D.id = D1.id
inner join (select companyId from activeProductionCompanies) C on D.companyId = C.companyId
where D.appId = productionApp() and D.status = 1 and D.monitoringEnabled = true and ifnull(monitoringEmails, '') != ''
group by 1, 2, 3, 4
),

parsedDisplays as
(
select
  displayId,
  companyId,
  parse_time("%R", json_extract_scalar(monitoringSchedule, "$.time.start")) as startTime,
  parse_time("%R", json_extract_scalar(monitoringSchedule, "$.time.end")) as endTime,
  parseDays(json_extract(monitoringSchedule, "$.week")) as weekDays,
  monitoringEmails
from currentDisplays
),

currentLicenses as
(
select
  CS.companyId as companyId,
  if(((planSubscriptionStatus = 'Active' or planSubscriptionStatus = 'Cancelled') and date(planCurrentPeriodEndDate) >= currentDate()) or (planSubscriptionStatus = 'Trial' and date(planTrialExpiryDate) >= currentDate()), planPlayerProLicenseCount, 0) +
  if(((playerProSubscriptionStatus = 'Active' or planSubscriptionStatus = 'Cancelled') and date(playerProCurrentPeriodEndDate) >= currentDate()), playerProLicenseCount, 0) as totalLicenses,
  playerProAssignedDisplays
from `rise-core-log.coreData.companySubscriptions` CS
inner join (select max(id) as id, companyId from `rise-core-log.coreData.companySubscriptions` where appId = productionApp() group by companyId) CS1 on CS.id = CS1.id
where CS.appId = productionApp()
),

displayAuthorizations as
(
select
  companyId,
  displayId,
  CAST(indexOf(displayId, playerProAssignedDisplays ) as INT64) as displayIndex,
  if(totalLicenses > CAST(indexOf(displayId, playerProAssignedDisplays ) as INT64), true, false) as displayAuthorized
from currentLicenses CL
cross join unnest(CL.playerProAssignedDisplays) as displayId
),

displaysScheduledToBeMonitored as
(
select 
  companyId, 
  displayId, 
  startTime, 
  endTime, 
  weekDay.day,
  weekDay.active,
  monitoringEmails
from 
(
select 
  companyId, 
  displayId, 
  startTime, 
  endTime, 
  weekDay,
  monitoringEmails
from parsedDisplays
cross join unnest(parsedDisplays.weekDays) as weekDay
where parsedDisplays.weekDays is not null
UNION ALL
select 
  companyId, 
  displayId, 
  startTime, 
  endTime, 
  STRUCT(null, null) as weekDay,
  monitoringEmails
from parsedDisplays
where parsedDisplays.weekDays is null
)
where
  ((weekDay.active = true and weekDay.day = format_date('%A', currentDate())) or (weekDay.active is null and weekDay.day is null)) and
  ((startTime <= currentTime() or startTime is null) and (currentTime() <= endTime or endTime is null))
)

select
  DM.displayId as displayId,
  DM.monitoringEmails as monitoringEmails
from displaysScheduledToBeMonitored DM
inner join displayAuthorizations DA on DM.displayId = DA.displayId and DM.companyId = DA.companyId
where DA.displayAuthorized = true
