#standardSQL
create temporary function addressees()
  RETURNS STRING AS
  ("tyler.johnson@risevision.com, santiago.noguez@risevision.com");
  
create temporary function limitDisplayCount(changeDate TIMESTAMP)
    returns BOOLEAN
    as (date_diff(current_date(), date(changeDate), DAY) < 1);
 
 
create temporary function parseDays(s STRING)
    returns ARRAY<STRUCT<day STRING, active BOOLEAN>>
    language js as """
      try {
        return JSON.parse(s);
      } catch (e) {
        return [];
      }
    """;

create temporary function indexOf(displayId STRING, displayList ARRAY<STRING>)
    returns FLOAT64
    language js AS """
      return displayList.indexOf(displayId);
    """;

create temporary function productionApp()
  returns STRING
    as ('s~rvaserver2');
    -- as ('dummy');


create temporary function currentDate()
  returns DATE
    as (current_date());
    -- as (date(2018, 2, 2));

create temporary function currentTime()
  returns TIME
    as (current_time());
    -- as (time(21, 20, 22));

with
uptimeDisplays AS (
SELECT 
  "1" as id, "s~rvaserver2" as appId, "PMPRUBNMRCXE" AS displayId, addressees() AS monitoringEmails, "fee1f642-cdd1-4bc4-8f93-1fc97cb00d55" as companyId, 1 as status, true as monitoringEnabled, '{"time":{"start":"17:00", "end":"20:30"}, "week":[{"day":"Monday", "active": true}, {"day":"Wednesday", "active": true}, {"day":"Friday", "active": true}]}' as monitoringSchedule
  union all select 
  "2",  "s~rvaserver2", "PKZJRKHH8QM3", addressees(), "fee1f642-cdd1-4bc4-8f93-1fc97cb00d55", 1, true, '{"time":{"start":"17:00", "end":"20:30"}, "week":[{"day":"Monday", "active": true}, {"day":"Wednesday", "active": true}, {"day":"Friday", "active": true}]}'
  union all select 
  "3", "s~rvaserver2", "JAQVBQS84SGK", addressees(), "fee1f642-cdd1-4bc4-8f93-1fc97cb00d55", 1, true, '{"time":{"start":"17:00", "end":"20:30"}, "week":[{"day":"Monday", "active": true}, {"day":"Wednesday", "active": true}, {"day":"Friday", "active": true}]}'
  union all select
  "4", "s~rvaserver2", "MMZ4NHZA3RCG", addressees(), "fee1f642-cdd1-4bc4-8f93-1fc97cb00d55", 1, true, null
 ),
 
coreDataDisplaysAndUptimeDisplays as (
select 
  id, appId, displayId, addressees() as monitoringEmails, companyId, status, true as monitoringEnabled, null as monitoringSchedule 
  from `rise-core-log.coreData.displays` 
  where displayId not in ("PMPRUBNMRCXE", "PKZJRKHH8QM3", "JAQVBQS84SGK", "MMZ4NHZA3RCG") and limitDisplayCount(changeDate)
union all 
select * from uptimeDisplays
),

activeProductionCompanies as
(
select 
  C.companyId as companyId
from `rise-core-log.coreData.companies` C
inner join (select max(id) as id, companyId from `rise-core-log.coreData.companies` where appId = productionApp() group by companyId) C1 on C.id = C1.id
where appId = productionApp() and companyStatus = 1 and (isTest is null or isTest = false) 
group by 1
),

currentDisplays as
(
select 
  D.displayId as displayId, 
  D.companyId as companyId, 
  ifnull(monitoringSchedule, '') as monitoringSchedule, 
  monitoringEmails
from coreDataDisplaysAndUptimeDisplays D
inner join (select max(id) as id, displayId from coreDataDisplaysAndUptimeDisplays where appId = productionApp() group by displayId) D1 on D.id = D1.id
inner join (select companyId from activeProductionCompanies) C on D.companyId = C.companyId
where D.appId = productionApp() and D.status = 1 and D.monitoringEnabled = true and ifnull(monitoringEmails, '') != ''
group by 1, 2, 3, 4
),

parsedDisplays as
(
select
  displayId,
  companyId,
  parse_time("%R", json_extract_scalar(monitoringSchedule, "$.time.start")) as startTime,
  parse_time("%R", json_extract_scalar(monitoringSchedule, "$.time.end")) as endTime,
  parseDays(json_extract(monitoringSchedule, "$.week")) as weekDays,
  monitoringEmails
from currentDisplays
),


displaysScheduledToBeMonitored as
(
select 
  companyId, 
  displayId, 
  startTime, 
  endTime, 
  weekDay.day,
  weekDay.active,
  monitoringEmails
from 
(
select 
  companyId, 
  displayId, 
  startTime, 
  endTime, 
  weekDay,
  monitoringEmails
from parsedDisplays
cross join unnest(parsedDisplays.weekDays) as weekDay
where parsedDisplays.weekDays is not null
UNION ALL
select 
  companyId, 
  displayId, 
  startTime, 
  endTime, 
  STRUCT(null, null) as weekDay,
  monitoringEmails
from parsedDisplays
where parsedDisplays.weekDays is null
)
where
  ((weekDay.active = true and weekDay.day = format_date('%A', currentDate())) or (weekDay.active is null and weekDay.day is null)) and
  ((startTime <= currentTime() or startTime is null) and (currentTime() <= endTime or endTime is null))
)

select
  DM.displayId as displayId,
  DM.monitoringEmails as monitoringEmails
from displaysScheduledToBeMonitored DM

